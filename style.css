
html,body{
  height: 75%;
  width: auto;
}

h1{
  text-align: center;
  font-family: sans-serif;
  font-size: 60px;

}
/*To ensure that the disks won't get scrunched on page resize, either set the container
to a static pixel width or make the sizing of the disks in percentages. */
/*Good use of flexbox though*/
.container{
  height: 75%;
  width: auto;
  display: flex;
  flex-direction: row;
  justify-content: : space-between;
  // background-color: #333;
  background-image: url("http://eskipaper.com/images/cityscape-12.jpg");
  background-position: center center;
  margin: 0 auto;
}
.poles{
  background: brown;
  height: 300px;
  width: 40px;
  margin-top: auto;
  margin-left: auto;
  margin-right: auto;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  overflow: visible;
  align-items: center;
  justify-content: flex-end;
}


.discs {
  border: solid purple;
  background: green;
}

.highlight {
  background: yellow;
}
/*If you wanted to expand the functionality of your game to allow for a dynamic
number of disks, you would have to apply some of this css styling for the disks
in your javascript instead of statically here. For example, the width of each disk
would have to be determined by the base width divided by the number of disks there
are times which level disk it is. */
#disc1{

  height: 25px;
  width: 100px;
  order:1;
  border: solid purple;
  border-style: groove;
  background: green;
}

#disc2{
  height: 25px;
  width: 120px;
  order: 2;
  border: solid cyan;
  border-style: groove;
  background: salmon;

}

#disc3{
  height: 25px;
  width: 140px;
  order:3;
  border: solid orange;
  border-style: groove;
  background: maroon;
}

footer.active {
  font-size: 70px;
  height: 100%;
  width: auto;
}
